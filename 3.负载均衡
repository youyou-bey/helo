在2、反向代理中，由于访问量突增，所以做了将放在一个服务器上的两个分开，并且做了反向代理
如果访问量扩大几倍甚至十倍，在此基础上我们应该做负载均衡

反向代理的理解：
  负载均衡其实质上就是: 通过反向代理服务, 把用户的请求转发至对应的地址池中, 在地址池中根据某种特定的算法, 来进行请求分配, 最终分配到某个特定webserver上的机制;
这种情况我们就称为负载均衡;所采用的nginx模块为: ngx_http_upstream_module模块来实现的连接池定义及算法的加载执行;

代理服务器就代理代理池  并加上一些算法（轮询算法、加权算法）默认使用轮询算法
轮询算法：默认就是轮询算法

试验环境：
        两台官网服务器（我们以两台为例）
        两台论坛服务器
        两台或者多台数据库服务器（这个交个dba 我们不用管）
        一台代理服务器
  
1、两台官网服务器
     nginx 的网站搭建，此处省略1000字
2、两台论坛服务器
    nginx的网站搭建，此处省略1000字
3、数据库服务器
      不是我们的活！！！记住了！

4、代理服务器
cat<<EOF>/usr/local/nginx/conf/nginx.conf

user  nginx;
worker_processes  1;
error_log  /opt/vhost/log/error.log;
pid        logs/nginx.pid;
events {
    use epoll;
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                     '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /opt/vhost/log/access.log  main;

    sendfile        on;
    tcp_nopush     on;

    keepalive_timeout  65;
    include /usr/local/nginx/conf.d/*.conf;
}
EOF

（1）建立地址池，默认轮询方法
cat<<EOF> /usr/local/nginx/conf.d/vhost.conf  
 upstream webserver {
        server 192.168.123.12;
        server 192.168.123.13;
    }
  
 server {
        listen       80;
        server_name  localhost;

        location / {
          proxy_set_header  Host  $host;
          proxy_set_header  X-Real-IP  $remote_addr;
          proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;
          proxy_pass    http://webserver;
        }
}
EOF

（2）建立地址池，权重模式  数字越大，权重越高
cat<<EOF> /usr/local/nginx/conf.d/vhost.conf  
 upstream webserver {
        server 192.168.123.12  weight2;
        server 192.168.123.13  weight1;
    }
  
 server {
        listen       80;
        server_name  localhost;

        location / {
          proxy_set_header  Host  $host;
          proxy_set_header  X-Real-IP  $remote_addr;
          proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;
          proxy_pass    http://webserver;
        }
}
EOF

（3）ip_hash  ip哈希
如果客户已经访问了某个服务器,当用户再次访问时,会将该请求通过哈希算法,自动定位到该服务器;
cat<<EOF> /usr/local/nginx/conf.d/vhost.conf  
 upstream webserver {
        ip_hash;
        server 192.168.123.12  weight=2;
        server 192.168.123.13  weight=1;
    }
  
 server {
        listen       80;
        server_name  localhost;

        location / {
          proxy_set_header  Host  $host;
          proxy_set_header  X-Real-IP  $remote_addr;
          proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;
          proxy_pass    http://webserver;
        }
}
EOF

4）

 cat<<EOF> /usr/local/nginx/conf.d/vhost.conf  
 upstream webserver {
         hash $request_uri；
        server 192.168.123.12  weight=2;
        server 192.168.123.13  weight=1;
    }
  
 server {
        listen       80;
        server_name  localhost;

        location / {
          proxy_set_header  Host  $host;
          proxy_set_header  X-Real-IP  $remote_addr;
          proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;
          proxy_pass    http://webserver;
        }
}
EOF

 

