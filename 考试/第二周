1.简述svn和git的区别
   首先svn和git都是版本控制工具
（1）
   SVN  工作模型是Client-server，是一种集中版本控制工具
   git  工作模型是 Distributed（分布的）分布式的版本控制工具
 （2）
    SVN属于地2代版本控制工具
    git属于第三代版本控制工具
    
 （3）
    SVN有权限控制，避免完全被clone走，适用于综合性文档的管理
    git要配合hub使用，避免分布式的损坏，适用于于纯代码
    
 （4）
     SVN只允许在线提交和回滚，push/pull  操作较慢
     git即使是离线也可以提交，push/pull  操作较快
  （5）
      svn  没有任何东西自动共享
      git可以用commit自动共享 
    
2. 什么是 Git 复刻（fork）？复刻（fork）,分支（branch）和克隆（clone）之间有什么区别？
   复刻（fork） 是对存储仓库（repository）进行的远程的、服务器端的拷贝，从源头上就有所区别。复刻实际上不是 Git 的范畴。它更像是个政治/社会概念。
   克隆（clone） 不是复刻，克隆是个对某个远程仓库的本地拷贝。克隆时，实际上是拷贝整个源存储仓库，包括所有历史记录和分支。
   分支（branch） 是一种机制，用于处理单一存储仓库中的变更，并最终目的是用于与其他部分代码合并。   
   
3.拉取请求（pull request）”和“分支（branch）”之间有什么区别？
  分支（branch） 是代码的一个独立版本。
  拉取请求（pull request） 是当有人用仓库，建立了自己的分支，做了些修改并合并到该分支（把自己修改应用到别人的代码仓库）。

4.  Git 中 HEAD、工作树和索引之间的区别？
  该工作树/工作目录/工作空间是你看到和编辑的（源）文件的目录树。
  该索引/中转区（staging area）是个在 /.git/index，单一的、庞大的二进制文件，该文件列出了当前分支中所有文件的 SHA1 检验和、时间戳和文件名，它不是个带有文件副本的目录。
  HEAD是当前检出分支的最后一次提交的引用/指针。

5. 什么是持续集成，持续部署，持续交付
   持续集成：开发者在代码的开发过程中  可以将代码频繁的部署到主干，并进行自动话部署
   持续交付：在持续集成的基础上。将代码部署到预生产环境---拉取代码并部署到测试环境
   持续部署：在持续交付基础上，把部署到预生产环境的过程自动化
   
   
6.描述Jenkins的工作流程
   Jenkins  是一种搬运工
   第一个阶段：任务的准备阶段（配置各种环境）
   第二个阶段： 任务开始工作（开始构建 部署）
   第三个阶段：构建完成后的操会继续进行构建完成后的操作（部署上线）
   
   
7. 使用何种工具监控的数据库？监控哪些指标
   zabbix  
   oracle的话有toad
   
   监控指标：
          吞吐量：数据库的处理能力
          执行时间：数据库完成工作需要多长时间
          并发：数据库同时执行了多少个作业
          利用率：数据库繁忙的时间百分比是多少
          
8. 写下之前工作中在生产环境配置使用过的监控系统？针对网络或服务配置过哪些监控项？使用什么方法进行报警通知
    zabbix
    监控http状态
    cup负载
    tcp连接状态
    内存
    磁盘i/o
    进程数
    
    邮箱报警
    微信报警
    电话报警
    
9.谈一谈zabbix的优缺点
  zabbix。 优点：功能较多
   
10.Git工作流程
