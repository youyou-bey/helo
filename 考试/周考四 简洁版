1、Redis 持久化机制有哪些
     RDB：是在不同的时间点，将redis存储的数据生成快照并存储到磁盘等介质上；
     AOF：则是换一个角度实现持久化，那就是将redis执行过的所有写指令（每秒钟）记录在日志中
	（在下次redis重新启动时，只要把这些写指令从前到后再重新执行一遍，就可以实现数据恢复了）

2、memcache与redis的区别都有哪些
     1）储存方式上；
	      memcache 把数据全部存在内存中，断电会挂掉，数据不能超过内存大小
	      redis  有部分存在硬盘上，redis可以持久化
	    （其数据redis支持数据持久化，可以将内存中的数据保持在次磁盘中，重启的时候可以再次加载进行使用，ps：RDB AOF）
      
     2）数据支持类型
	      memcache  所有的值均是简单的字符串
	      redis 作为其代替者，支持的更为丰富的数据类型，提供list set zset hash  等数据结构的储存
        
      3）使用底层模型不同
        	它们之间底层实现方式，以及与客户端之间通信的应用协议不一样
        	redis直接自己构建了vm机制，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求

     （但是如果数据量很大，大到内存已经无法全部容纳的时候，我想对存储有一定了解的人都在想，这个时候redis是怎么处理的呢？处理速度是否会直线下降？）
         Redis使用到了VM,在redis.conf设置vm-enabled yes 即开启VM功能。 通过VM功能可以实现冷热数据分离。使热数据仍在内存中，冷数据保存到磁盘。
            样就可以避免因为内存不足而造成访问速度下降的问题。在这里，需要特别提到的是，Redis并没有使用OS提供的Swap，而是自己实现

       4）values值大小不同
        	redis最大可以达到1gb
                memcache只有1mb
        
       5）redis支持数据备份，即master-slave模式的数据备份
	
3、单线程的redis为什么那么快
        1）纯内存操作 （减少磁盘I/O）
        2)单线程操作，避免了繁琐的上下文切换
        3）采用了非阻塞I/O多路复用机制

4、redis的数据类型，以及每种数据类型的使用场景
    4.redis的数据类型，以及每种数据类型的使用场景
      一共五种
  1）string
  	 是 redis 最基本的类型，一个 key 对应一个 value。
	   场景：一般做一些复杂的计数功能的缓存。
     
  2）hash
  	value存放的是结构化对象  一个key对应一个map
  	场景：博主在做单点登录的时候，就是用这种数据结构存储用户信息，
         以cookieId作为key，设置30分钟为缓存过期时间，能很好的模拟出类似session的效果。
         
  3）list
	  redis的集合是有顺序可重复 
	  场景：可以做简单的消息队列功能
        
  4）set
	  redis的集合是无顺序不重复：
	  场景：用唯一性，可以统计访问网站的所有独立IP
	       好友推荐的时候根据tag求交集，大于某个threshold（临界值的）就可以推荐。
           
  5）sortset
	  redis的集合是有顺序不重复 ：比set多了个权重参数score，可排序 （此处的不能重复是索引为唯一的，数据却可以重复）
	  场景：可应用于排行榜应用
https://www.cnblogs.com/liuqijia/p/11428145.html
注意：为什么不用jvm自带的set进行去重呢？
          因为我们的系统一般都是集群部署，使用JVM自带的Set，比较麻烦，难道为了一个做一个全局去重，再起一个公共服务，太麻烦了。
          另外，就是利用交集、并集、差集等操作，可以计算共同喜好，全部的喜好，自己独有的喜好等功能。

5、多级redis的部署？如何保证数据一致？
      多级部署：主从复制，读写分离
      数据一致：
	     一类是猪数据库（master）  一类是从数据库（slave）
	     主数据库可以进行读写操作，当发生写操作的时候自动将数据同步到从数据库
	     从数据库一般是只读的（权限），并接受主数据库同步过来的数据
	     一个主数据库可以有多个从数据库，而一个从数据库只有一个主数据库

6、redis常见性能问题和解决方案
       (1) Master 最好不要做任何持久化工作，如 RDB 内存快照和 AOF 日志文件。（提高主服务器的处理性能）
       (2) 如果数据比较重要，某个 Slave 开启 AOF 备份数据，策略设置为每秒同步一次
       (3) 为了主从复制的速度和连接的稳定性， Master 和 Slave 最好在同一个局域网内
       (4) 尽量避免在压力很大的主库上增加从库
       (5) 主从复制不要用图状结构，用单向链表结构更为稳定，即： Master <- Slave1 <- Slave2 <-
  Slave3…     

7、Redis的操作是原子性的，怎么保证原子性的？
     原子性：一个操作的不可再分，操作要么执行，要么不执行
                  redis的操作之所以是原子性的，是因为redis是单线程的
     redis本身提供的所有API都是原子操作，redis中的事务其实要保证批量的原子性


8、mysql里有2000w数据，redis中只存20w数据，如何保证redis中的数据都是热点数据 
      redis内存数据大小上升到一定大小的时候，就会实施数据淘汰策略
      redis 提供 6种数据淘汰策略，根据这些淘汰策略保证redis中的数据都是热点数据


9、热数据和冷数据是什么？
     热点数据的缓存才有价值 
     冷数据：大部分数据可能还没有再次访问到就被挤出内存，不仅占用内存，而且价值不大 ，看情况使用缓存
     据更新前至少读取两次，缓存才有意义。这个是最基本的策略，如果缓存还没有起作用就失效了，那就没有太大价值了
     两者都是信息修改频率不高，读取通常非常高的场景


那存不存在，修改频率很高，但是又不得不考虑缓存的场景呢？
有！
比如，这个读取接口对数据库的压力很大，但是又是热点数据，这个时候就需要考虑通过缓存手段，减少数据库的压力，
比如我们的某助手产品的，点赞数，收藏数，分享数等是非常典型的热点数据，但是又不断变化，此时就需要将数据同步保存到Redis缓存，减少数据库压力。

      	
            	















